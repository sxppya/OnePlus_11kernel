name: Build 11
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      ksun_branch:
        description: "Choose KernelSU Next Branch"
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      android13_5_15_susfs_branch:
        description: "Choose SusFS Branch for android13-5.15"
        type: string
        default: "gki-android13-5.15"

jobs:
  build-oneplus-11:
    name: build-oneplus-11 (OP11, kalama, oneplus/sm8550, android13, 5.15, ${{ inputs.ksun_branch }})
    runs-on: ubuntu-latest
    steps:
      - name: Select Appropriate SusFS Branch
        id: get-susfs-branch
        run: |
          echo "susfs_branch=${{ inputs.android13_5_15_susfs_branch }}" >> $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Kernel
        uses: ./.github/actions/
        with:
          model: OP11
          soc: kalama
          branch: oneplus/sm8550
          manifest: oneplus_11_v.xml
          android_version: android13
          kernel_version: "5.15"
          ksun_branch: ${{ inputs.ksun_branch }}
          susfs_branch: ${{ steps.get-susfs-branch.outputs.susfs_branch }}

  trigger-release:
    needs:
      - build-oneplus-11
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "*TEST BUILD* OnePlus Kernels With KernelSU Next & SUSFS v1.5.8 *TEST BUILD*"
      RELEASE_NOTES: |
        This release contains KernelSU Next and SUSFS v1.5.8
        
        Module: 
        -> https://github.com/sidex15/ksu_module_susfs

        Non-Official Managers:
        -> https://github.com/KernelSU-Next/KernelSU-Next

        Features:
        [+] KernelSU-Next
        [+] SUSFS v1.5.8
        [+] Wireguard Support
        [+] Maphide LineageOS Detections
        [+] Futile Maphide for jit-zygote-cache Detections
        [+] Magic Mount Support
        [+] Ptrace message leak fix for kernels < 5.16
        [+] Manual Hooks [scope_min_manual_hooks_v1.4]
        [+] CONFIG_TMPFS_XATTR Support [Mountify Support]
        [+] BBR v1 Support.
        [+] HMBIRD scx support for OnePlus 13 & OnePlus Ace 5 Pro.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate and Create New Tag
        run: |
          BASE_TAG="v1.5.8-r0"
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="$BASE_TAG"
          else
            LATEST_TAG=$(printf "%s\n%s\n" "$LATEST_TAG" "$BASE_TAG" | sort -rV | head -n1)
          fi
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: true
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets Dynamically
        run: |
          for file in ./downloaded-artifacts/kernel-*/*; do
            if [ -d "$file" ]; then
                continue
            fi
            echo "Uploading $file..."
            gh release upload ${{ env.NEW_TAG }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{ env.NEW_TAG }}

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*

      - name: 📦 Collect logs if build fails
        if: failure()
        run: |
         mkdir -p logs
          echo "📅 构建时间：$(date '+%Y-%m-%d %H:%M:%S')" > logs/BUILD_INFO.txt
          echo "📱 构建设备：${{ github.event.inputs.FEIL }}" >> logs/BUILD_INFO.txt
          echo "🔢 构建版本：build-${{ github.run_number }}" >> logs/BUILD_INFO.txt
          echo "📦 仓库来源：${{ github.repository }}" >> logs/BUILD_INFO.txt
          echo "👤 仓库拥有者：${{ github.repository_owner }}" >> logs/BUILD_INFO.txt
          cp -r kernel_workspace/kernel_platform/common/out logs/common || true
          cp -r kernel_workspace/kernel_platform/out logs/platform || true
          zip -r logs.zip logs || true


      - name: 🗂️ Upload build logs to GitHub
        if: failure()
        uses: actions/upload-artifact@v4
        with:
         name: Kernel_Build_Logs_${{ github.run_number }}
         path: logs.zip

      - name: 🚨 Upload logs to Telegram (on failure)
        if: failure()
        run: |
         escape_markdown_v2() {
         local raw="$1"
         echo "$raw" | sed -e 's/\\/\\\\/g' -e 's/\*/\\*/g' -e 's/_/\\_/g' -e 's/\[/\\[/g' \
                        -e 's/\]/\\]/g' -e 's/(/\\(/g' -e 's/)/\\)/g' -e 's/\./\\./g' \
                        -e 's/-/\\-/g' -e 's/=/\\=/g' -e 's/!/\\!/g'
         }

         OWNER="${{ github.repository_owner }}"
         if [[ "$OWNER" == "sxppya" ]]; then
         FEIL_ESCAPED=$(escape_markdown_v2 "${{ github.event.inputs.FEIL }}")
         VERSION_ESCAPED=$(escape_markdown_v2 "build-${{ github.run_number }}")

         if [ -f logs.zip ]; then
           curl -F document=@logs.zip \
             -F chat_id=${{ secrets.TG_CHAT_ID }} \
             -F caption="❌ 构建失败\\! 已打包日志\\.\n📱 设备：${FEIL_ESCAPED}\n🏷️ 版本：${VERSION_ESCAPED}" \
             -F parse_mode=MarkdownV2 \
             https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument
         else
         echo "⚠️ 未找到 logs.zip，跳过上传"
         fi
         else
         echo "⛔ 非主仓库（$OWNER），跳过 Telegram 推送"
         fi


          
      - name: Compress AnyKernel3 to zip
        if: ${{ success() }}
        run: |
          ZIP_NAME="${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}.zip"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          cd AnyKernel3
          zip -r ../$ZIP_NAME ./*
          cd ..

      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         name: "${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}"
         tag_name: "${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}"
         files: |
          ./${{ env.ZIP_NAME }}
          ./AnyKernel3/Image
          
      - name: Upload zip to Telegram (only for your repo)
        if: ${{ success() }}
        run: |
         if [[ "${{ github.repository_owner }}" == "sxppya" ]]; then
         curl -F document=@./${{ env.ZIP_NAME }} \
           -F chat_id=${{ secrets.TG_CHAT_ID }} \
           -F caption="📦 内核构建完成！版本号：${{ env.KSUVER }} 设备：${{ github.event.inputs.FEIL }}" \
           https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument
           else
           echo "⛔ 非主仓库，跳过 Telegram 推送"
           fi


      - name: Upload Image to Telegram (only for your repo)
        if: ${{ success() }}
        run: |
         if [[ "${{ github.repository_owner }}" == "sxppya" ]]; then
         curl -F document=@./AnyKernel3/Image \
           -F chat_id=${{ secrets.TG_CHAT_ID }} \
           -F caption="📦 Image 上传成功！设备：${{ github.event.inputs.FEIL }}，Tag：build-${{ env.KSUVER }}" \
           https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument
           else
           echo "⛔ 非主仓库，跳过 Telegram 推送"
           fi

      - name: Telegram 推送
        if: always()
        run: |
          escape_markdown_v2() {
          local raw="$1"
          echo "$raw" | sed -e 's/\\/\\\\/g' \
                        -e 's/\*/\\*/g' \
                        -e 's/_/\\_/g' \
                        -e 's/\[/\\[/g' \
                        -e 's/\]/\\]/g' \
                        -e 's/(/\\(/g' \
                        -e 's/)/\\)/g' \
                        -e 's/\./\\./g' \
                        -e 's/-/\\-/g' \
                        -e 's/=/\\=/g' \
                        -e 's/!/\\!/g' \
                        -e 's/#/\\#/g' \
                        -e 's/~/\\~/g' \
                        -e 's/\`/\\`/g' \
                        -e 's/>/\\>/g' \
                        -e 's/\+/\\+/g' \
                        -e 's/|/\\|/g' \
                        -e 's/{/\\{/g' \
                        -e 's/}/\\}/g'
          }

          if [[ "${GITHUB_REPOSITORY_OWNER}" == "sxppya" ]]; then
          STATUS="✅ 构建成功"
          [[ "success" != "success" ]] && STATUS="❌ 构建失败"

          REPO="${GITHUB_REPOSITORY}"
          TAG="${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}"

          RAW_TEXT="*OnePlus 内核构建通知* 🧱\
                    *状态：* ${STATUS}\
                    *仓库：* ${REPO}\
                    *版本：* ${TAG}\
                    [查看构建日志](https://github.com/${REPO}/actions/runs/${{ github.run_id }})"

              TEXT_ESCAPED=$(escape_markdown_v2 "$RAW_TEXT")

              curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
              -d chat_id=${{ secrets.TG_CHAT_ID }} \
              -d parse_mode="MarkdownV2" \
              -d text="$TEXT_ESCAPED"
              else
              echo "⛔ 非主仓库，跳过 Telegram 推送"
              fi

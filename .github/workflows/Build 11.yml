name: Build 11
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      device_codename:
        description: '输入设备代号 (例如 OP11)，用于日志和通知'
        required: true
        type: string
        default: 'OP11'
      ksun_branch:
        description: "Choose KernelSU Next Branch"
        required: true
        type: choice
        options:
          - stable
          - next
        default: next
      android13_5_15_susfs_branch:
        description: "Choose SusFS Branch for android13-5.15"
        type: string
        default: "gki-android13-5.15"

jobs:
  build-oneplus-11:
    name: build-oneplus-11 (${{ inputs.device_codename }}, ${{ inputs.ksun_branch }})
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Kernel
        # 此步骤会调用 .github/actions/action.yml
        # 它会构建内核并上传一个名为 "OP11_android13-5.15_Next_xxxxx_SUSFS_xxxxx" 的产物
        uses: ./.github/actions/
        with:
          model: OP11
          soc: kalama
          branch: oneplus/sm8550
          manifest: oneplus_11_v.xml
          android_version: android13
          kernel_version: "5.15"
          ksun_branch: ${{ inputs.ksun_branch }}
          susfs_branch: ${{ inputs.android13_5_15_susfs_branch }}

  trigger-release:
    # 依赖 build-oneplus-11 任务成功完成
    needs:
      - build-oneplus-11
    # 只有当用户手动选择 make_release: true 时才运行
    if: ${{ inputs.make_release }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: 📝 Parse Artifact Info
        id: parser
        run: |
          # downloaded-artifacts 目录下应该只有一个子目录，即上一步上传的产物
          ARTIFACT_DIR=$(ls -d downloaded-artifacts/*/)
          ARTIFACT_NAME=$(basename "$ARTIFACT_DIR")
          
          # 找到目录下的 zip 文件
          ZIP_FILE_PATH=$(find "$ARTIFACT_DIR" -name "*.zip")
          ZIP_FILE_NAME=$(basename "$ZIP_FILE_PATH")

          # 将解析出的信息设置为输出，供后续步骤使用
          echo "release_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "release_tag=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "zip_path=$ZIP_FILE_PATH" >> $GITHUB_OUTPUT
          echo "zip_name=$ZIP_FILE_NAME" >> $GITHUB_OUTPUT

      - name: 🚀 Upload to GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.parser.outputs.release_name }}
          tag_name: ${{ steps.parser.outputs.release_tag }}
          # Prerelease 设为 true，表示是预发布版
          prerelease: true
          # 在 Release Note 中添加一些基本信息
          body: |
            Release for ${{ inputs.device_codename }}
            KernelSU Branch: `${{ inputs.ksun_branch }}`
          # 上传 zip 文件和 Image 文件
          files: |
            ${{ steps.parser.outputs.zip_path }}
            ${{ steps.parser.outputs.zip_path }}/Image

      - name: ⬆️ Upload zip to Telegram
        if: success() && env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != ''
        run: |
          if [[ "${{ github.repository_owner }}" == "sxppya" ]]; then
            curl -F document=@"${{ steps.parser.outputs.zip_path }}" \
              -F chat_id=${TG_CHAT_ID} \
              -F caption="📦 内核构建完成！ 设备：${{ inputs.device_codename }}，版本：${{ steps.parser.outputs.release_tag }}" \
              https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument
          else
            echo "⛔ 非主仓库，跳过 Telegram 推送"
          fi

      - name: 📦 Collect logs if release fails
        if: failure()
        run: |
          mkdir -p logs
          echo "📅 发布时间：$(date '+%Y-%m-%d %H:%M:%S')" > logs/BUILD_INFO.txt
          echo "📱 构建设备：${{ inputs.device_codename }}" >> logs/BUILD_INFO.txt
          echo "🔢 构建版本：build-${{ github.run_number }}" >> logs/BUILD_INFO.txt
          echo "📦 仓库来源：${{ github.repository }}" >> logs/BUILD_INFO.txt
          # 注意：这里只能记录 release 任务的信息，无法获取上一个 build 任务的详细日志文件
          zip -r logs.zip logs

      - name: 🗂️ Upload release logs to GitHub
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_Release_Logs_${{ github.run_number }}
          path: logs.zip

      - name: 🚨 Upload logs to Telegram (on failure)
        if: failure() && env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != ''
        run: |
          # 此函数用于转义 Telegram MarkdownV2 的特殊字符
          escape_markdown_v2() {
            echo "$1" | sed -e 's/_/\\_/g' -e 's/\*/\\*/g' -e 's/\[/\\[/g' -e 's/\]/\\]/g' -e 's/(/\\(/g' -e 's/)/\\)/g' -e 's/~/\\~/g' -e 's/`/\\`/g' -e 's/>/\\>/g' -e 's/#/\\#/g' -e 's/\+/\\+/g' -e 's/-/\\-/g' -e 's/=/\\=/g' -e 's/!/\\!/g' -e 's/{/\\{/g' -e 's/}/\\}/g' -e 's/\./\\./g' -e 's/|/\\|/g'
          }

          if [[ "${{ github.repository_owner }}" == "sxppya" ]]; then
            CAPTION=$(escape_markdown_v2 "❌ 发布失败! 已打包日志.
            📱 设备: ${{ inputs.device_codename }}
            🏷️ 版本: build-${{ github.run_number }}")

            if [ -f logs.zip ]; then
              curl -F document=@logs.zip \
                -F chat_id=${TG_CHAT_ID} \
                -F caption="$CAPTION" \
                -F parse_mode=MarkdownV2 \
                https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument
            else
              echo "⚠️ 未找到 logs.zip，跳过上传"
            fi
          else
            echo "⛔ 非主仓库（${{ github.repository_owner }}），跳过 Telegram 推送"
          fi
